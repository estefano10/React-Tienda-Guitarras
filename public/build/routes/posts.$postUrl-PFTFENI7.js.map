{
  "version": 3,
  "sources": ["../../../app/routes/posts.$postUrl.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\posts.$postUrl.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\posts.$postUrl.jsx\");\n}\n// REMIX HMR END\n\nimport { getPost } from \"../models/posts.server\";\nimport { useLoaderData } from '@remix-run/react';\nimport { formatearFecha } from '~/utils/helpers';\nimport styles from '../styles/blog.css';\nexport function meta({\n  data\n}) {\n  if (!data) {\n    return [{\n      title: 'GuitarLA - Entrada No Encontrada',\n      descripcion: `Guitarras, venta de guitarras, entrada no encontrada`\n    }];\n  }\n  return [{\n    title: `GuitarLA - ${data.data[0].attributes.titulo}`\n  }, {\n    descripcion: `Guitarras, venta de guitarras, entrada ${data.data[0].attributes.titulo}`\n  }];\n}\nexport function links() {\n  return [{\n    rel: 'stylesheet',\n    href: styles\n  }];\n}\nexport async function loader({\n  params\n}) {\n  const {\n    postUrl\n  } = params;\n  const post = await getPost(postUrl);\n  if (post.data.length === 0) {\n    throw new Response('', {\n      status: 404,\n      statusText: 'Entrada No Encontrada'\n    });\n  }\n  return post;\n}\nexport default function Post() {\n  _s();\n  const post = useLoaderData();\n  const {\n    titulo,\n    contenido,\n    imagen,\n    publishedAt\n  } = post.data[0].attributes;\n  return <article className=\"contenedor post mt-3\">\r\n        <img className=\"imagen\" src={imagen.data.attributes.url} alt={`Imagen blog ${titulo}`} />\r\n        <div className=\"contenido\">\r\n        <h3>{titulo}</h3>\r\n        <p className='fecha'>{formatearFecha(publishedAt)}</p>\r\n        <p className='texto'>{contenido}</p>\r\n\r\n        </div>\r\n    </article>;\n}\n_s(Post, \"fZHiJAe/O1AbG9n0uZeka359gO0=\", false, function () {\n  return [useLoaderData];\n});\n_c = Post;\nvar _c;\n$RefreshReg$(_c, \"Post\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,mBAAwB;AAkDhB;AArER,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,0CAA4C,EAAE;AAAA,EACvF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACnC;AAOO,SAAS,KAAK;AAAA,EACnB;AACF,GAAG;AACD,MAAI,CAAC,MAAM;AACT,WAAO,CAAC;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,IACf,CAAC;AAAA,EACH;AACA,SAAO,CAAC;AAAA,IACN,OAAO,cAAc,KAAK,KAAK,CAAC,EAAE,WAAW;AAAA,EAC/C,GAAG;AAAA,IACD,aAAa,0CAA0C,KAAK,KAAK,CAAC,EAAE,WAAW;AAAA,EACjF,CAAC;AACH;AACO,SAAS,QAAQ;AACtB,SAAO,CAAC;AAAA,IACN,KAAK;AAAA,IACL,MAAM;AAAA,EACR,CAAC;AACH;AAgBe,SAAR,OAAwB;AAC7B,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,KAAK,KAAK,CAAC,EAAE;AACjB,SAAO,mDAAC,aAAQ,WAAU,wBACpB;AAAA,uDAAC,SAAI,WAAU,UAAS,KAAK,OAAO,KAAK,WAAW,KAAK,KAAK,eAAe,YAA7E;AAAA;AAAA;AAAA;AAAA,WAAuF;AAAA,IACvF,mDAAC,SAAI,WAAU,aACf;AAAA,yDAAC,QAAI,oBAAL;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,mDAAC,OAAE,WAAU,SAAS,yBAAe,WAAW,KAAhD;AAAA;AAAA;AAAA;AAAA,aAAkD;AAAA,MAClD,mDAAC,OAAE,WAAU,SAAS,uBAAtB;AAAA;AAAA;AAAA;AAAA,aAAgC;AAAA,SAHhC;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OAPC;AAAA;AAAA;AAAA;AAAA,SAQL;AACJ;AACA,GAAG,MAAM,gCAAgC,OAAO,WAAY;AAC1D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,MAAM;AAEvB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
